JWT, or JSON Web Token, is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.

Key Components of JWT:
Header: This typically consists of two parts: the type of token, which is JWT, and the signing algorithm being used, such as HMAC SHA256 or RSA.

{
  "alg": "HS256",
  "typ": "JWT"
}
Payload: This is the second part of the token, which contains the claims. Claims are statements about an entity (typically, the user) and additional data. There are three types of claims:

Registered claims: Predefined claims which are not mandatory but recommended to provide a set of useful, interoperable claims. Examples include iss (issuer), exp (expiration time), sub (subject), and aud (audience).
Public claims: Claims that can be defined at will by those using JWTs. To avoid collisions, they should be defined in the IANA JSON Web Token Registry or be as unique as possible.
Private claims: Custom claims created to share information between parties that agree on using them.
{
  "sub": "1234567890",
  "name": "John Doe",
  "admin": true
}
Signature: To create the signature part, you have to take the encoded header, the encoded payload, a secret, the algorithm specified in the header, and sign that.

HMACSHA256(
  base64UrlEncode(header) + "." +
  base64UrlEncode(payload),
  secret)
How JWT Works:
The client logs in with a username and password.
The server creates a JWT with a secret key and sends it back to the client.
The client stores the JWT (usually in local storage or cookies) and sends it along with every subsequent request to the server.
The server validates the token by decoding it using the secret key. If the token is valid, the server processes the request.
