-----------------------------------findAll---------------------

It will generate a standard select query which will retrieve all entries from the table (unless restrictde by something like a where clause)

-----------------------------------findByPk---------------------
 
the findByPk method obtains the single entry from the table , using the provide primary key

const checkId = await User.findByPk(id)
if(checkId == null) {
  console.log("Not found")
}
else {

}
const checkId = await User.findOne({
where : {
id : id;
}
})
return 
{
console.log("found")
}

---------------------------------findOne------------------------------

the findOne method obtains the first entry it finds

const project = await Project.findOne({ where: { title: 'My Title' } });
if (project === null) {
  console.log('Not found!');
} else {
  console.log(project instanceof Project); // true
  console.log(project.title); // 'My Title'
}

--------------------------------findorCreate----------------------

The method findOrCreate will create an entry in the table unless it can find one fulfilling the query options. In both cases, it will return an instance (either the found instance or the created instance) and a boolean indicating whether that instance was created or already existed.

The where option is considered for finding the entry, and the defaults option is used to define what must be created in case nothing was found. If the defaults do not contain values for every column, Sequelize will take the values given to where (if present).

empty database with a User model which has a username and a job.

const [user, created] = await User.findOrCreate({
  where: { username: 'sdepold' },
  defaults: {
    job: 'Technical Lead JavaScript',
  },
});
console.log(user.username); // 'sdepold'
console.log(user.job); // This may or may not be 'Technical Lead JavaScript'
console.log(created); // The boolean indicating whether this instance was just created
if (created) {
  console.log(user.job); // This will certainly be 'Technical Lead JavaScript'
}

-------------------------------findAndCountAll-----------------------------------

The findAndCountAll method is a convenience method that combines findAll and count. This is useful when dealing with queries related to pagination where you want to retrieve data with a limit and offset but also need to know the total number of records that match the query.

When group is not provided, the findAndCountAll method returns an object with two properties:

count - an integer - the total number records matching the query
rows - an array of objects - the obtained records
When group is provided, the findAndCountAll method returns an object with two properties:

count - an array of objects - contains the count in each group and the projected attributes
rows - an array of objects - the obtained records
const { count, rows } = await Project.findAndCountAll({
  where: {
    title: {
      [Op.like]: 'foo%',
    },
  },
  offset: 10,
  limit: 2,
});
console.log(count);
console.log(rows);
